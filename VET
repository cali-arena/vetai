# 🐾 VetDiagnosisAI

**Sistema Inteligente de Apoio ao Diagnóstico Veterinário**

Aplicação web completa em Python/Streamlit para análise de exames laboratoriais e sintomas de pets (cães, gatos), com predição de diagnósticos usando Machine Learning.

---

## 📋 Funcionalidades

### 📊 Visão Geral
- Cards com métricas principais (total de casos, distribuição de espécies, top diagnósticos)
- Taxa de positividade por doença
- Alertas de valores críticos em exames
- Gráficos temporais (quando há datas)

### 🧪 Laboratório & Sintomas (EDA)
- Análise exploratória interativa com boxplots, histogramas, scatter plots
- Heatmap de correlação entre variáveis
- Filtros por espécie, raça, sexo, faixa etária e diagnóstico
- Destaque de outliers e valores fora da faixa de referência

### 🤖 Treinar Modelo
- Pipeline completo de ML com pré-processamento automático
- Seleção de features por importância mútua
- Balanceamento de classes (class_weight='balanced')
- Grid search de hiperparâmetros
- Avaliação com ROC AUC, F1, Precision, Recall
- Matriz de confusão estratificada por espécie
- Salvamento automático de modelo e preprocessadores

### 🔍 Predição
- Formulário para entrada manual de sintomas e exames
- Upload de arquivo CSV/XLSX para predição em lote
- Top-N diagnósticos prováveis com probabilidades
- Explicabilidade com SHAP (features mais influentes)
- Alertas automáticos para valores fora de referência

### 📥 Upload de Dados
- Suporte a CSV e XLSX (múltiplas abas)
- Mapeamento interativo de colunas
- Validação de schema
- Merge entre múltiplos arquivos

### 🧠 Insights & Regras
- Geração automática de insights clínicos
- Hipóteses baseadas em correlações
- Sugestões de próximos passos diagnósticos
- **⚠️ Disclaimers claros: ferramenta educacional, não substitui julgamento clínico**

---

## 🚀 Como Executar

### 1. Instalação
```bash
# Clone ou baixe o projeto
cd VET

# Instale as dependências
pip install -r requirements.txt
```

### 2. Execução
```bash
python -m streamlit run app.py
```

O aplicativo abrirá automaticamente em `http://localhost:8501`

---

## 📂 Estrutura do Projeto

```
VetDiagnosisAI/
├── app.py                                    # Aplicação principal
├── pages/                                     # Páginas Streamlit
│   ├── 1_📊_Visão_Geral.py
│   ├── 2_🧪_Laboratório_&_Sintomas_(EDA).py
│   ├── 3_🤖_Treinar_Modelo.py
│   ├── 4_🔍_Predição.py
│   ├── 5_📥_Upload_de_Dados.py
│   └── 6_🧠_Insights_&_Regras.py
├── vetlib/                                    # Biblioteca de funções
│   ├── data_io.py                            # I/O e validação de dados
│   ├── preprocessing.py                       # Pré-processamento
│   ├── modeling.py                            # Modelagem ML
│   ├── explain.py                             # Explicabilidade (SHAP)
│   └── insights.py                            # Geração de insights
├── data/                                      # Datasets
│   └── exemplo_vet.csv                        # Dataset sintético de exemplo
├── models/                                    # Modelos treinados (.pkl)
├── assets/                                    # Recursos visuais
├── requirements.txt                           # Dependências Python
└── README.md                                  # Este arquivo
```

---

## 📊 Estrutura de Dados

### Colunas Esperadas

**Identificação:**
- `id`: ID único do caso
- `data`: Data do exame (opcional)
- `especie`: Canina, Felina, Equina
- `raca`: Raça do animal
- `idade_anos`: Idade em anos
- `sexo`: M (Macho) ou F (Fêmea)

**Sintomas (binários 0/1 ou texto):**
- `febre`, `apatia`, `perda_peso`, `vomito`, `diarreia`
- `tosse`, `letargia`, `feridas_cutaneas`, `poliuria`, `polidipsia`

**Exames Laboratoriais (numéricos):**
- `hemoglobina`, `hematocrito`, `leucocitos`, `plaquetas`
- `glicose`, `ureia`, `creatinina`
- `alt`, `ast`, `fosfatase_alcalina`
- `proteinas_totais`, `albumina`, `colesterol`, `triglicerideos`

**Alvo:**
- `diagnostico`: Doença/condição identificada

### Faixas de Referência por Espécie

#### Canina
- Creatinina: 0.5–1.6 mg/dL
- Ureia: 20–50 mg/dL
- Glicose: 70–120 mg/dL
- Hemoglobina: 12–18 g/dL
- ALT: 10–100 U/L

#### Felina
- Creatinina: 0.8–2.0 mg/dL
- Ureia: 30–60 mg/dL
- Glicose: 70–150 mg/dL
- Hemoglobina: 9–15 g/dL
- ALT: 10–80 U/L

---

## 🔗 Datasets Públicos Sugeridos

O aplicativo inclui links para datasets veterinários públicos:

1. **Kaggle – Veterinary Disease Detection**
   - Sintomas → Diagnóstico
   - https://www.kaggle.com/datasets/taruntiwarihp/veterinary-disease-detection

2. **UCI – Horse Colic**
   - Dados de cólica em cavalos (excelente para ML tabular)
   - https://archive.ics.uci.edu/dataset/46/horse+colic

3. **Kaggle – Animal Blood Samples**
   - Amostras de sangue de animais (ideal para EDA e faixas normais)
   - https://www.kaggle.com/datasets/andrewmvd/animal-blood-samples

**⚠️ Importante:** Verifique as licenças e termos de uso de cada dataset.

---

## 📖 Guia de Uso

### Upload de Dados
1. Vá para "📥 Upload de Dados"
2. Faça upload de arquivo CSV ou XLSX
3. Mapeie as colunas do seu arquivo para o schema esperado
4. Valide e salve

### Análise Exploratória
1. Acesse "🧪 Laboratório & Sintomas (EDA)"
2. Use os filtros laterais (espécie, raça, diagnóstico)
3. Explore distribuições e correlações
4. Identifique valores anormais

### Treinamento
1. Vá para "🤖 Treinar Modelo"
2. Selecione o algoritmo (Logistic Regression, Random Forest, LightGBM)
3. Configure hiperparâmetros (ou use busca em grid)
4. Treine o modelo e avalie métricas
5. Salve o modelo treinado

### Predição
1. Acesse "🔍 Predição"
2. Preencha o formulário OU faça upload de arquivo
3. Visualize top diagnósticos prováveis
4. Analise explicabilidade (SHAP)
5. Exporte resultados

---

## ⚠️ Avisos Legais

**Este software é uma ferramenta educacional e de pesquisa.**

- ❌ **NÃO substitui** o julgamento clínico de um médico veterinário
- ❌ **NÃO deve ser usado** como única base para decisões terapêuticas
- ✅ **Deve ser usado** como apoio à decisão clínica por profissionais qualificados
- ✅ **Ideal para** ensino, pesquisa e análise exploratória de dados

**Sempre consulte um médico veterinário licenciado para diagnóstico e tratamento.**

---

## 🛠️ Tecnologias

- **Frontend:** Streamlit
- **ML:** scikit-learn, LightGBM, XGBoost
- **Explicabilidade:** SHAP
- **Visualização:** Plotly, Matplotlib, Seaborn
- **Data:** Pandas, NumPy, OpenPyXL

---

## 📧 Suporte

Para dúvidas ou sugestões, abra uma issue no repositório do projeto.

---

## 📄 Licença

Este projeto é fornecido "como está" para fins educacionais.

