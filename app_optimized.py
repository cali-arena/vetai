import streamlit as st
import pandas as pd
import numpy as np
import joblib
from pathlib import Path
import sys
import traceback
import requests
import json
import os
from datetime import datetime

# Configura√ß√£o da p√°gina otimizada
st.set_page_config(
    page_title="DIAGVET IA",
    page_icon="üêæ",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# CSS m√≠nimo para carregamento r√°pido
st.markdown("""
<style>
    .main-header {
        background: #667eea;
        color: white;
        padding: 1rem;
        text-align: center;
        border-radius: 10px;
        margin-bottom: 1rem;
        font-size: 1.8rem;
    }
    .form-section {
        background: #f093fb;
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
        color: white;
    }
    .prediction-box {
        background: #667eea;
        color: white;
        padding: 1rem;
        border-radius: 10px;
        text-align: center;
        margin: 1rem 0;
    }
    .chat-message {
        margin: 5px 0;
        padding: 10px;
        border-radius: 5px;
        max-width: 80%;
    }
    .user-message {
        background: #667eea;
        color: white;
        margin-left: auto;
    }
    .assistant-message {
        background: #f093fb;
        color: white;
        margin-right: auto;
    }
    section[data-testid="stSidebar"] {display: none !important;}
    .stApp > div:first-child {padding-left: 1rem !important;}
    
    @media (max-width: 768px) {
        .main-header {font-size: 1.5rem !important; padding: 0.5rem !important;}
        .form-section {padding: 0.5rem !important;}
        .stButton > button {width: 100% !important; margin: 0.25rem 0 !important;}
        .stColumns {flex-direction: column !important;}
        .stColumns > div {width: 100% !important;}
    }
</style>
""", unsafe_allow_html=True)

# Header
st.markdown('<h1 class="main-header">üêæ DIAGVET IA</h1>', unsafe_allow_html=True)

# Fun√ß√£o otimizada para carregar modelo
@st.cache_data
def carregar_modelo():
    try:
        possible_paths = [
            "VET/models/model_minimal.pkl",
            "models/model_minimal.pkl",
            "./VET/models/model_minimal.pkl"
        ]
        
        for path in possible_paths:
            if Path(path).exists():
                return joblib.load(path)
        
        st.error("‚ùå Modelo n√£o encontrado!")
        return None
    except Exception as e:
        st.error(f"‚ùå Erro: {e}")
        return None

# Fun√ß√£o DeepSeek simplificada
def call_deepseek_api(message):
    api_key = os.getenv("DEEPSEEK_API_KEY", "sk-your-api-key-here")
    
    if api_key == "sk-your-api-key-here":
        return f"ü§ñ **IA Veterin√°ria**\n\nBaseado em '{message}':\n\n‚Ä¢ Analise os sintomas\n‚Ä¢ Considere exames complementares\n‚Ä¢ Inicie tratamento sintom√°tico\n\n*Configure API key para respostas completas.*"
    
    try:
        headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"}
        data = {
            "model": "deepseek-chat",
            "messages": [
                {"role": "system", "content": "Voc√™ √© um veterin√°rio especialista. Seja claro e t√©cnico."},
                {"role": "user", "content": message}
            ],
            "max_tokens": 1000
        }
        
        response = requests.post("https://api.deepseek.com/v1/chat/completions", headers=headers, json=data, timeout=15)
        
        if response.status_code == 200:
            return response.json()["choices"][0]["message"]["content"]
        else:
            return f"‚ùå Erro API: {response.status_code}"
    except:
        return "‚ùå Erro de conex√£o"

# Carregar modelo
model_data = carregar_modelo()

if model_data is None:
    st.stop()

# Extrair componentes
modelo = model_data['model']
scaler = model_data['scaler']
le_diagnostico = model_data['le_diagnostico']

# Sistema de abas
tab1, tab2 = st.tabs(["üîç Predi√ß√£o", "üí¨ Chat IA"])

# ABA 1: PREDI√á√ÉO
with tab1:
    st.subheader("üîç Predi√ß√£o de Diagn√≥stico")
    
    # Formul√°rio simplificado
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown('<div class="form-section">', unsafe_allow_html=True)
        st.markdown("**üêï Informa√ß√µes B√°sicas**")
        especie = st.selectbox("Esp√©cie:", ["Canina", "Felina"])
        idade_anos = st.number_input("Idade (anos):", 0.0, 20.0, 5.0)
        sexo = st.selectbox("Sexo:", ["M", "F"])
        st.markdown('</div>', unsafe_allow_html=True)
        
        st.markdown('<div class="form-section">', unsafe_allow_html=True)
        st.markdown("**üß™ Exames Laboratoriais**")
        hemoglobina = st.number_input("Hemoglobina (g/dL):", 5.0, 20.0, 12.0)
        hematocrito = st.number_input("Hemat√≥crito (%):", 20.0, 60.0, 45.0)
        leucocitos = st.number_input("Leuc√≥citos (mil/ŒºL):", 3.0, 25.0, 8.0)
        glicose = st.number_input("Glicose (mg/dL):", 50.0, 300.0, 100.0)
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown('<div class="form-section">', unsafe_allow_html=True)
        st.markdown("**üè• Sintomas Cl√≠nicos**")
        febre = st.checkbox("Febre")
        apatia = st.checkbox("Apatia")
        perda_peso = st.checkbox("Perda de peso")
        vomito = st.checkbox("V√¥mito")
        diarreia = st.checkbox("Diarreia")
        tosse = st.checkbox("Tosse")
        letargia = st.checkbox("Letargia")
        feridas_cutaneas = st.checkbox("Feridas cut√¢neas")
        poliuria = st.checkbox("Poli√∫ria")
        polidipsia = st.checkbox("Polidipsia")
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Bot√£o de predi√ß√£o
    if st.button("üîç Realizar Predi√ß√£o", type="primary"):
        try:
            # Criar array de dados (39 features)
            sintomas = [febre, apatia, perda_peso, vomito, diarreia, tosse, letargia, feridas_cutaneas, poliuria, polidipsia]
            sintomas_values = [1 if s else 0 for s in sintomas]
            
            dados_predicao = np.array([
                especie == "Canina", especie == "Felina", idade_anos, sexo == "M",
                hemoglobina, hematocrito, leucocitos, 10.0,
                glicose, 30.0, 1.2, 25.0, 50.0,
                100.0, 7.0, 3.5, 200.0, 100.0, 2.0,
                1.0, 1.5, 2.0
            ] + sintomas_values + [0, 0, 0, 0, 0, 0, 0]).reshape(1, -1)
            
            # Fazer predi√ß√£o
            predicao = modelo.predict(dados_predicao)
            probabilidades = modelo.predict_proba(dados_predicao)
            
            # Obter diagn√≥stico
            diagnostico_predito = le_diagnostico.inverse_transform(predicao)[0]
            confianca = max(probabilidades[0]) * 100
            
            # Mostrar resultado
            st.markdown('<div class="prediction-box">', unsafe_allow_html=True)
            st.markdown(f"### üéØ **Diagn√≥stico: {diagnostico_predito}**")
            st.markdown(f"### üìä **Confian√ßa: {confianca:.1f}%**")
            st.markdown('</div>', unsafe_allow_html=True)
            
            # Sugest√µes b√°sicas
            st.subheader("üíä Recomenda√ß√µes")
            if diagnostico_predito == "Doen√ßa renal":
                st.markdown("‚Ä¢ **Fluidos IV:** 10-20 ml/kg/h")
                st.markdown("‚Ä¢ **Furosemida:** 1-2 mg/kg 2x/dia")
                st.markdown("‚Ä¢ **Exames:** Urina completa, protein√∫ria")
            elif diagnostico_predito == "Infec√ß√£o":
                st.markdown("‚Ä¢ **Antibi√≥tico:** Amoxicilina 12.5-25 mg/kg 2x/dia")
                st.markdown("‚Ä¢ **Exames:** Hemograma, cultura")
                st.markdown("‚Ä¢ **Dura√ß√£o:** 7-10 dias")
            else:
                st.markdown("‚Ä¢ Consulte veterin√°rio especialista")
                st.markdown("‚Ä¢ Exames complementares necess√°rios")
                st.markdown("‚Ä¢ Monitoramento cl√≠nico")
                
        except Exception as e:
            st.error(f"‚ùå Erro na predi√ß√£o: {e}")

# ABA 2: CHAT IA
with tab2:
    st.subheader("üí¨ Chat com IA Veterin√°ria")
    
    # Inicializar chat
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = []
    
    # Mostrar hist√≥rico
    for message in st.session_state.chat_history:
        if message["role"] == "user":
            st.markdown(f'<div class="chat-message user-message"><strong>Voc√™:</strong> {message["content"]}</div>', unsafe_allow_html=True)
        else:
            st.markdown(f'<div class="chat-message assistant-message"><strong>IA:</strong> {message["content"]}</div>', unsafe_allow_html=True)
    
    # Input do usu√°rio
    user_input = st.text_area("Digite sua pergunta:", height=80, placeholder="Ex: C√£o com v√¥mito, o que pode ser?")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üì§ Enviar"):
            if user_input.strip():
                # Adicionar mensagem do usu√°rio
                st.session_state.chat_history.append({"role": "user", "content": user_input})
                
                # Gerar resposta
                with st.spinner("ü§ñ IA pensando..."):
                    ai_response = call_deepseek_api(user_input)
                
                # Adicionar resposta
                st.session_state.chat_history.append({"role": "assistant", "content": ai_response})
                st.rerun()
    
    with col2:
        if st.button("üóëÔ∏è Limpar Chat"):
            st.session_state.chat_history = []
            st.rerun()

# Footer
st.divider()
st.markdown("üêæ DIAGVET IA - Sistema Veterin√°rio")


