"""
VetDiagnosisAI - App Simples para Veterin√°rios
Interface focada apenas em predi√ß√µes r√°pidas
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
import pickle
from pathlib import Path
from datetime import datetime

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="VetDiagnosisAI - Predi√ß√£o R√°pida",
    page_icon="üêæ",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# CSS personalizado para interface limpa
st.markdown("""
<style>
    .main-header {
        text-align: center;
        color: #1f77b4;
        margin-bottom: 2rem;
    }
    .prediction-box {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 10px;
        border-left: 5px solid #1f77b4;
        margin: 1rem 0;
    }
    .metric-box {
        background-color: #e8f4f8;
        padding: 0.5rem;
        border-radius: 5px;
        text-align: center;
        margin: 0.5rem 0;
    }
</style>
""", unsafe_allow_html=True)

# Header principal
st.markdown('<h1 class="main-header">üêæ VetDiagnosisAI - Predi√ß√£o R√°pida</h1>', unsafe_allow_html=True)
st.markdown('<p style="text-align: center; color: #666;">Sistema Inteligente de Apoio ao Diagn√≥stico Veterin√°rio</p>', unsafe_allow_html=True)

# Fun√ß√£o para carregar modelo
@st.cache_data
def carregar_modelo():
    """Carrega o modelo treinado"""
    try:
        model_path = Path("models/gb_optimized_model.pkl")
        if model_path.exists():
            model_data = joblib.load(model_path)
            return model_data
        else:
            return None
    except Exception as e:
        st.error(f"Erro ao carregar modelo: {e}")
        return None

# Carregar modelo
model_data = carregar_modelo()

if model_data is None:
    st.error("‚ùå Modelo n√£o encontrado! Por favor, treine o modelo primeiro no app gerencial.")
    st.info("üìß Entre em contato com o administrador do sistema.")
    st.stop()

# Extrair componentes do modelo
modelo = model_data['model']
scaler = model_data['scaler']
le_diagnostico = model_data['le_diagnostico']
accuracy = model_data.get('accuracy', 0)
training_date = model_data.get('timestamp', 'N/A')

# Mostrar informa√ß√µes do modelo
col1, col2, col3 = st.columns(3)
with col1:
    st.markdown('<div class="metric-box">', unsafe_allow_html=True)
    st.metric("üéØ Acur√°cia do Modelo", f"{accuracy:.1%}")
    st.markdown('</div>', unsafe_allow_html=True)

with col2:
    st.markdown('<div class="metric-box">', unsafe_allow_html=True)
    st.metric("üìä √öltima Atualiza√ß√£o", training_date.split('T')[0] if 'T' in training_date else training_date)
    st.markdown('</div>', unsafe_allow_html=True)

with col3:
    st.markdown('<div class="metric-box">', unsafe_allow_html=True)
    st.metric("üß† Tipo de Modelo", "Gradient Boosting")
    st.markdown('</div>', unsafe_allow_html=True)

st.divider()

# Formul√°rio de predi√ß√£o
st.subheader("üîç Predi√ß√£o de Diagn√≥stico")

# Dividir em colunas para melhor organiza√ß√£o
col1, col2 = st.columns(2)

with col1:
    st.markdown("**üìã Dados B√°sicos do Animal**")
    
    especie = st.selectbox(
        "Esp√©cie",
        options=["Canina", "Felina", "Equina", "Bovino", "Su√≠no", "Ave", "Outro"],
        help="Selecione a esp√©cie do animal"
    )
    
    raca = st.text_input(
        "Ra√ßa",
        placeholder="Ex: Labrador, Persa, SRD...",
        help="Digite a ra√ßa do animal"
    )
    
    idade_anos = st.number_input(
        "Idade (anos)",
        min_value=0.0,
        max_value=30.0,
        value=1.0,
        step=0.1,
        help="Idade do animal em anos"
    )
    
    sexo = st.selectbox(
        "Sexo",
        options=["M", "F"],
        help="Sexo do animal"
    )

with col2:
    st.markdown("**üß™ Exames Laboratoriais**")
    
    hemoglobina = st.number_input(
        "Hemoglobina (g/dL)",
        min_value=0.0,
        max_value=30.0,
        value=12.0,
        step=0.1,
        help="Valor de hemoglobina"
    )
    
    hematocrito = st.number_input(
        "Hemat√≥crito (%)",
        min_value=0.0,
        max_value=100.0,
        value=40.0,
        step=0.1,
        help="Valor de hemat√≥crito"
    )
    
    leucocitos = st.number_input(
        "Leuc√≥citos (x10¬≥/ŒºL)",
        min_value=0.0,
        max_value=100.0,
        value=10.0,
        step=0.1,
        help="Contagem de leuc√≥citos"
    )
    
    glicose = st.number_input(
        "Glicose (mg/dL)",
        min_value=0.0,
        max_value=500.0,
        value=100.0,
        step=1.0,
        help="N√≠vel de glicose"
    )

# Segunda linha de exames
col3, col4 = st.columns(2)

with col3:
    st.markdown("**üî¨ Mais Exames**")
    
    ureia = st.number_input(
        "Ureia (mg/dL)",
        min_value=0.0,
        max_value=200.0,
        value=30.0,
        step=1.0,
        help="N√≠vel de ureia"
    )
    
    creatinina = st.number_input(
        "Creatinina (mg/dL)",
        min_value=0.0,
        max_value=10.0,
        value=1.0,
        step=0.1,
        help="N√≠vel de creatinina"
    )
    
    alt = st.number_input(
        "ALT (U/L)",
        min_value=0.0,
        max_value=1000.0,
        value=50.0,
        step=1.0,
        help="Alanina aminotransferase"
    )

with col4:
    st.markdown("**üè• Sintomas Cl√≠nicos**")
    
    # Sintomas como checkboxes
    febre = st.checkbox("Febre")
    apatia = st.checkbox("Apatia")
    perda_peso = st.checkbox("Perda de Peso")
    vomito = st.checkbox("V√¥mito")
    diarreia = st.checkbox("Diarreia")
    tosse = st.checkbox("Tosse")
    letargia = st.checkbox("Letargia")
    feridas_cutaneas = st.checkbox("Feridas Cut√¢neas")
    poliuria = st.checkbox("Poli√∫ria")
    polidipsia = st.checkbox("Polidipsia")

# Bot√£o de predi√ß√£o
if st.button("üîç Realizar Predi√ß√£o", type="primary", use_container_width=True):
    
    # Preparar dados para predi√ß√£o
    try:
        # Converter sintomas para valores bin√°rios
        sintomas = [febre, apatia, perda_peso, vomito, diarreia, tosse, letargia, feridas_cutaneas, poliuria, polidipsia]
        sintomas_values = [1 if s else 0 for s in sintomas]
        
        # Criar array com todos os dados
        dados_predicao = np.array([
            especie == "Canina", especie == "Felina",  # One-hot encoding para esp√©cie
            idade_anos,
            sexo == "M",  # 1 para macho, 0 para f√™mea
            hemoglobina, hematocrito, leucocitos, 10.0,  # Plaquetas padr√£o
            glicose, ureia, creatinina, alt, 50.0,  # AST padr√£o
            100.0, 7.0, 3.5, 200.0, 100.0, 2.0  # Valores padr√£o para outros exames
        ] + sintomas_values).reshape(1, -1)
        
        # Fazer predi√ß√£o
        predicao = modelo.predict(dados_predicao)
        probabilidades = modelo.predict_proba(dados_predicao)
        
        # Obter diagn√≥stico
        diagnostico_predito = le_diagnostico.inverse_transform(predicao)[0]
        confianca = max(probabilidades[0]) * 100
        
        # Mostrar resultado
        st.markdown('<div class="prediction-box">', unsafe_allow_html=True)
        st.markdown(f"### üéØ **Diagn√≥stico Predito: {diagnostico_predito}**")
        st.markdown(f"### üìä **Confian√ßa: {confianca:.1f}%**")
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Mostrar probabilidades de todos os diagn√≥sticos
        st.subheader("üìà Probabilidades por Diagn√≥stico")
        
        probabilidades_df = pd.DataFrame({
            'Diagn√≥stico': le_diagnostico.classes_,
            'Probabilidade (%)': probabilidades[0] * 100
        }).sort_values('Probabilidade (%)', ascending=False)
        
        # Gr√°fico de barras das probabilidades
        import plotly.express as px
        fig = px.bar(
            probabilidades_df.head(5),
            x='Probabilidade (%)',
            y='Diagn√≥stico',
            orientation='h',
            title='Top 5 Diagn√≥sticos Mais Prov√°veis',
            color='Probabilidade (%)',
            color_continuous_scale='Blues'
        )
        fig.update_layout(height=400)
        st.plotly_chart(fig, use_container_width=True)
        
        # Tabela com todas as probabilidades
        st.dataframe(probabilidades_df, use_container_width=True)
        
        # Log da predi√ß√£o para an√°lise posterior
        log_predicao = {
            'timestamp': datetime.now().isoformat(),
            'especie': especie,
            'idade': idade_anos,
            'sexo': sexo,
            'sintomas': sintomas,
            'diagnostico_predito': diagnostico_predito,
            'confianca': confianca,
            'probabilidades': probabilidades[0].tolist()
        }
        
        # Salvar log (implementar sistema de logging posteriormente)
        st.success("‚úÖ Predi√ß√£o realizada com sucesso!")
        
    except Exception as e:
        st.error(f"‚ùå Erro na predi√ß√£o: {e}")
        st.info("Por favor, verifique os dados inseridos e tente novamente.")

# Footer
st.divider()
st.markdown("""
<div style="text-align: center; color: #666; margin-top: 2rem;">
    <p>üêæ VetDiagnosisAI - Sistema Inteligente de Diagn√≥stico Veterin√°rio</p>
    <p><small>Para d√∫vidas ou suporte, entre em contato com o administrador do sistema.</small></p>
</div>
""", unsafe_allow_html=True)
